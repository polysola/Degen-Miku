// main.js
jQuery(document).ready(function () {
  // Initialize Firebase
  const firebaseConfig = {
    apiKey: "AIzaSyD55ZnU_GX7L5varAuprnWugy_FDXM1FhQ",
    authDomain: "data-sui.firebaseapp.com",
    projectId: "data-sui",
    storageBucket: "data-sui.appspot.com",
    messagingSenderId: "15867478435",
    appId: "1:15867478435:web:9d2b205c67e828c8385a16",
    measurementId: "G-9HKQLMBCKN",
  };

  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();

  // Initialize variables
  let totalScore = 0;
  let comboScore = 0;
  let saveTimeout = null;
  let clickCount = 0;
  let comboTimer = null;
  const defaultAvatar = "./images/site-300x300.png";
  let userId = null;
  let userType = "web";
  let userInfo = null;
  let lastClickTime = 0;
  const COMBO_TIMEOUT = 2000;

  // Get user info from URL parameters (when shared from Telegram)

  function getUserFromWebApp() {
    try {
      if (window.Telegram && window.Telegram.WebApp) {
        const webAppUser = window.Telegram.WebApp.initDataUnsafe.user;
        console.log("Raw WebApp User Data:", webAppUser); // Debug log

        if (webAppUser) {
          return {
            id: webAppUser.id,
            first_name: webAppUser.first_name || "",
            last_name: webAppUser.last_name || "",
            username: webAppUser.username || "", //
            photo_url: webAppUser.photo_url || defaultAvatar,
          };
        }
      }
    } catch (error) {
      console.error("Error getting user from WebApp:", error);
    }
    return null;
  }

  // Cập nhật hàm getUserFromURL
  function getUserFromURL() {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const tgData = {};

      const fields = [
        "id",
        "first_name",
        "last_name",
        "username",
        "photo_url",
        "auth_date",
        "hash",
      ];
      fields.forEach((field) => {
        const value = urlParams.get(field);
        if (value) tgData[field] = decodeURIComponent(value);
      });

      console.log("URL Parameters Data:", tgData); // Debug log

      if (tgData.id) {
        return {
          id: tgData.id,
          first_name: tgData.first_name || "",
          last_name: tgData.last_name || "",
          username: tgData.username || "",
          photo_url: tgData.photo_url || defaultAvatar,
        };
      }
    } catch (error) {
      console.error("Error getting user from URL:", error);
    }
    return null;
  }
  const styles = `
<style>
#userProfile {
  position: fixed;
  left: 50%;
  transform: translateX(-50%);
  width: 200px;
  max-width: 90vw;
  background: rgba(255,255,255,0.95);
  padding: 10px 15px;
  border-radius: 16px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  backdrop-filter: blur(10px);
  z-index: 1000;
  transition: transform 0.3s ease;
}

.combo-container {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 999;
  text-align: center;
  pointer-events: none;
}

.floating-score {
  position: fixed;
  font-size: 24px;
  font-weight: bold;
  color: #FFD700;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
  z-index: 1000;
  pointer-events: none;
  animation: floatUp 1s ease-out forwards;
}

@keyframes floatUp {
  0% {
    transform: translate(-50%, 0) scale(1);
    opacity: 1;
  }
  100% {
    transform: translate(-50%, -100px) scale(1.5);
    opacity: 0;
  }
}

.score-updated {
  transform: translate(-50%, 0) scale(1.1) !important;
}
</style>
`;

  jQuery("head").append(styles);

  function sendTelegramMessage(message) {
    const botToken = "8076891315:AAEIGvE-QJ31R1bYH1jh_veq2Plu2NOpMUg";
    const chatId = "-1002465171724";
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    console.log("Current userInfo:", userInfo); // Debug log

    const replyMarkup = {
      inline_keyboard: [
        [
          { text: "🏆 Top Users", callback_data: "/top" },
          { text: "📊 Statistics", callback_data: "/stats" },
        ],
        [
          { text: "👤 Profile", callback_data: "/profile" },
          { text: "📈 Leaderboard", callback_data: "/leaderboard" },
        ],
      ],
    };

    const fullMessage = message;
    console.log("Sending message:", fullMessage);

    return fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: fullMessage,
        parse_mode: "HTML",
        reply_markup: replyMarkup,
      }),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log("Telegram notification sent:", data);
        // Đăng ký các commands với Bot
        return fetch(`https://api.telegram.org/bot${botToken}/setMyCommands`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            commands: [
              { command: "top", description: "View top users ranking" },
              { command: "stats", description: "View your game statistics" },
              { command: "profile", description: "View your profile" },
              {
                command: "leaderboard",
                description: "View global leaderboard",
              },
            ],
          }),
        });
      })
      .then((response) => response.json())
      .then((data) => console.log("Commands registered:", data))
      .catch((error) =>
        console.error("Error sending Telegram notification:", error)
      );
  }

  // Add UI elements
  jQuery("body").append(`
    <div id="userProfile" style="position: fixed; top: 10px;  display: flex; align-items: center; gap: 10px; background: rgba(255,255,255,0.95); padding: 10px 15px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); backdrop-filter: blur(10px); z-index: 1000; transition: all 0.3s ease; width: 200px;">
      <img id="userAvatar" style="width: 40px; height: 40px; min-width: 40px; border-radius: 50%; object-fit: cover; border: 2px solid #FFD936;" src="${defaultAvatar}" alt="User Avatar">
      <div style="display: flex; flex-direction: column; flex: 1; min-width: 0;">
        <span id="userName" style="font-weight: 600; font-size: 14px; color: #536942; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">Web User</span>
        <div class="score-container" style="display: flex; align-items: center; gap: 4px;">
          <img src="images/coin2.gif" alt="coin" style="width: 18px; height: 18px; object-fit: contain;">
          <span id="userScore" style="color: #536942; font-size: 14px; font-weight: 600; min-width: 40px;">0</span>
        </div>
      </div>
    </div>
    <div id="comboDisplay" class="combo-container">
      <div class="combo-counter"></div>
      <div class="combo-score"></div>
    </div>
    <div id="comboTimer" class="combo-timer"></div>
  `);

  // Update user profile

  // Load user data
  async function loadUserData() {
    try {
      console.log("Loading data for user:", userId);
      const doc = await db
        .collection("users")
        .doc(userId || "default")
        .get();

      if (doc.exists) {
        const data = doc.data();
        totalScore = data.score || 0;
        if (data.user_info) {
          userInfo = data.user_info;
        }
      } else {
        await db
          .collection("users")
          .doc(userId || "default")
          .set({
            score: 0,
            created_at: firebase.firestore.FieldValue.serverTimestamp(),
            user_type: userType,
            user_info: userInfo,
          });
      }

      updateUserProfile();
      updateTotalScore();
    } catch (error) {
      console.error("Error loading user data:", error);
    }
  }

  function updateComboDisplay(clicks, points) {
    const comboEl = jQuery("#comboDisplay");
    if (clicks > 0) {
      comboEl.find(".combo-counter").text(`×${clicks}`);
      comboEl.find(".combo-score").text(`+${points}`);

      comboEl.removeClass("pulse bounce shake rotate");
      if (clicks >= 10) {
        comboEl.addClass("ultimate-combo shake");
      } else if (clicks >= 6) {
        comboEl.addClass("super-combo rotate");
      } else if (clicks >= 4) {
        comboEl.addClass("good-combo bounce");
      } else {
        comboEl.addClass("pulse");
      }
    } else {
      comboEl.find(".combo-counter").text("");
      comboEl.find(".combo-score").text("");
    }
  }

  // Show floating score
  function showFloatingScore(points, x, y) {
    const scoreEl = jQuery(`<div class="floating-score">+${points}</div>`);
    scoreEl.css({
      left: "50%",
      top: y + "px",
    });
    jQuery("body").append(scoreEl);
    setTimeout(() => scoreEl.remove(), 1000);
  }

  // Update combo timer
  function updateComboTimer(percentage) {
    jQuery("#comboTimer").css("width", `${percentage}%`);
  }

  let notificationTimeout = null;

  function resetCombo() {
    if (comboTimer) {
      clearTimeout(comboTimer);
    }

    if (clickCount > 0) {
      const finalClickCount = clickCount;
      const finalComboScore = comboScore;
      const finalTotalScore = totalScore + comboScore;

      totalScore = finalTotalScore;
      updateTotalScore();
      debouncedSaveScore();

      showFloatingScore(
        comboScore,
        window.innerWidth / 2,
        window.innerHeight / 2
      );

      if (notificationTimeout) {
        clearTimeout(notificationTimeout);
      }

      notificationTimeout = setTimeout(() => {
        const userHeader = `🎮 <b>𝗣𝗟𝗔𝗬𝗘𝗥 𝗣𝗥𝗢𝗙𝗜𝗟𝗘</b>\n\n`;
        let playerInfo = "";

        if (userInfo.first_name) {
          playerInfo += `👤 <b>Name:</b> ${userInfo.first_name}\n`;
        }
        if (userInfo.username) {
          playerInfo += `📝 <b>Username:</b> @${userInfo.username}\n`;
        }
        if (userInfo.id) {
          playerInfo += `🆔 <b>Player ID:</b> ${userInfo.id}\n\n`;
        }

        // Combo Results Section với hiệu ứng đặc biệt
        const comboMessage = `
        🌟 <b>━━━ 𝗚𝗔𝗠𝗘 𝗥𝗘𝗦𝗨𝗟𝗧𝗦 ━━━</b>
        
        🎯 <b>Hits:</b> ${finalClickCount}
        ⚡️ <b>Combo Chain:</b> +${finalComboScore}
        👑 <b>Final Score:</b> ${finalTotalScore}
        
        ━━━━━━━━━━━━━━━━
        `;

        // Tạo inline keyboard buttons
        const inlineKeyboard = {
          inline_keyboard: [
            [
              { text: "🔄 Play Again", callback_data: "play_again" },
              { text: "📊 Leaderboard", callback_data: "show_leaderboard" },
            ],
            [{ text: "🎮 Share Score", callback_data: "share_score" }],
          ],
        };

        // Gửi tin nhắn với inline keyboard
        sendTelegramMessage(userHeader + playerInfo + comboMessage);
      }, 1000);
    }

    clickCount = 0;
    comboScore = 0;
    isComboActive = false;
    activeComboPoints = 0;

    // Reset UI
    jQuery("#comboDisplay").removeClass(
      "active ultimate-combo super-combo good-combo"
    );
    jQuery("#comboTimer").css("width", "0%");
    updateComboDisplay(0, 0);
  }

  function initializeUser() {
    let user = getUserFromURL();
    if (!user) {
      user = getUserFromWebApp();
    }

    if (user) {
      userType = "telegram";
      userId = `tg_${user.id}`;
      userInfo = user;
      console.log("Initialized Telegram user:", userInfo);

      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.expand();
      }
    } else {
      userType = "web";
      const timestamp = new Date().getTime();
      userId = `web_${timestamp}`;
      userInfo = {
        id: userId,
        first_name: "Web",
        last_name: `User_${timestamp.toString().slice(-4)}`,
        username: `web_${timestamp.toString().slice(-4)}`,
        photo_url: defaultAvatar,
      };
      console.log("Created web user:", userInfo);
    }
  }

  function updateUserProfile() {
    console.log("Updating profile with user info:", userInfo);

    if (userInfo) {
      jQuery("#userAvatar").attr("src", userInfo.photo_url || defaultAvatar);

      let displayName = [userInfo.first_name, userInfo.last_name]
        .filter(Boolean)
        .join(" ");
      if (userInfo.username) {
        displayName += ` (@${userInfo.username})`;
      }
      jQuery("#userName").text(displayName || "Web User");
    }
  }
  window.onerror = function (msg, url, lineNo, columnNo, error) {
    if (msg.includes("Telegram")) {
      console.warn("Telegram API error:", msg);
      return false;
    }
    return false;
  };

  let isComboActive = false;
  let activeComboPoints = 0;

  function handleClick(e) {
    const currentTime = Date.now();

    if (currentTime - lastClickTime > COMBO_TIMEOUT) {
      clickCount = 0;
      comboScore = 0;
      isComboActive = false;
      activeComboPoints = 0;
    }

    clickCount++;

    let currentClickPoints;
    if (clickCount >= 10) {
      currentClickPoints = 10;
      activeComboPoints = 10;
      isComboActive = true;
    } else if (clickCount >= 6) {
      currentClickPoints = 6;
      activeComboPoints = 6;
      isComboActive = true;
    } else if (clickCount >= 4) {
      currentClickPoints = 4;
      activeComboPoints = 4;
      isComboActive = true;
    } else {
      currentClickPoints = 1;
      activeComboPoints = 1;
    }

    if (isComboActive) {
      comboScore += activeComboPoints;
    } else {
      comboScore += currentClickPoints;
    }

    console.log(
      `Click ${clickCount}: Combo Active: ${isComboActive}, Points: ${currentClickPoints}, Total Combo: ${comboScore}`
    );

    updateComboDisplay(clickCount, comboScore);
    showFloatingScore(currentClickPoints, window.innerWidth / 2, e.pageY);

    if (comboTimer) {
      clearTimeout(comboTimer);
    }

    const startTime = Date.now();

    function updateTimer() {
      const elapsed = Date.now() - startTime;
      const remaining = COMBO_TIMEOUT - elapsed;

      if (remaining > 0) {
        const percentage = (remaining / COMBO_TIMEOUT) * 100;
        updateComboTimer(percentage);
        requestAnimationFrame(updateTimer);
      } else {
        resetCombo();
      }
    }

    updateTimer();
    comboTimer = setTimeout(resetCombo, COMBO_TIMEOUT);
    lastClickTime = currentTime;
  }

  // Save score
  function debouncedSaveScore() {
    if (saveTimeout) {
      clearTimeout(saveTimeout);
    }

    saveTimeout = setTimeout(async () => {
      try {
        console.log("Saving score:", totalScore);
        const userData = {
          score: totalScore,
          last_updated: firebase.firestore.FieldValue.serverTimestamp(),
          user_type: userType,
          user_info: userInfo,
        };

        await db
          .collection("users")
          .doc(userId || "default")
          .set(userData, { merge: true });
        console.log("Score saved successfully");
      } catch (error) {
        console.error("Error saving score:", error);
      }
    }, 1000);
  }

  // Update total score display
  function updateTotalScore() {
    jQuery("#userScore").text(`Score: ${totalScore}`);
    jQuery("#userProfile").addClass("score-updated");
    setTimeout(() => {
      jQuery("#userProfile").removeClass("score-updated");
    }, 200);
  }

  // Handle click events
  jQuery("body").on(
    "click",
    ".bdt-element-link[data-id='a9ef003']",
    function (e) {
      e.preventDefault();
      handleClick(e);
      if (typeof createParticles === "function") {
        createParticles(e.pageX, e.pageY);
      }
    }
  );

  // Initialize
  console.log("Starting initialization...");
  initializeUser();
  updateUserProfile();
  loadUserData();
  console.log("Initialization complete");
});
