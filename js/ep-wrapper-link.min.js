jQuery(document).ready(function () {
  // Firebase config - giữ nguyên
  const firebaseConfig = {
    apiKey: "AIzaSyD55ZnU_GX7L5varAuprnWugy_FDXM1FhQ",
    authDomain: "data-sui.firebaseapp.com",
    projectId: "data-sui",
    storageBucket: "data-sui.appspot.com",
    messagingSenderId: "15867478435",
    appId: "1:15867478435:web:9d2b205c67e828c8385a16",
    measurementId: "G-9HKQLMBCKN",
  };

  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();

  // Initialize variables
  let totalScore = 0;
  let comboScore = 0;
  let saveTimeout = null;
  let clickCount = 0;
  let comboTimer = null;
  const defaultAvatar = "./images/site-300x300.png";
  let userId = null;
  let userType = "web";
  let userInfo = null;
  let lastClickTime = 0;
  const COMBO_TIMEOUT = 2000; // 2 seconds for combo timeout

  // Check if running in Telegram WebApp
  const isTelegramApp = window.Telegram && window.Telegram.WebApp;
  if (isTelegramApp) {
    document.documentElement.requestFullscreen();
  }

  // Add UI elements
  jQuery("body").append(`
    <div id="userProfile" style="position: fixed; top: 20px; right: 20px; display: flex; align-items: center; gap: 15px; background: rgba(255,255,255,0.95); padding: 15px 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); backdrop-filter: blur(10px); z-index: 1000; transition: all 0.3s ease;">
      <img id="userAvatar" style="width: 48px; height: 48px; border-radius: 50%; object-fit: cover; border: 2px solid #FFD936;" src="${defaultAvatar}" alt="User Avatar">
      <div style="display: flex; flex-direction: column;">
        <span id="userName" style="font-weight: 600; font-size: 16px; color: #536942;">Web User</span>
        <span id="userScore" style="color: #536942; font-size: 14px; font-weight: 500;">Score: 0</span>
      </div>
    </div>
    <div id="comboDisplay" class="combo-container">
      <div class="combo-counter">×1</div>
      <div class="combo-score">+0</div>
    </div>
    <div id="comboTimer" class="combo-timer"></div>
  `);

  function checkTelegramAuth() {
    // ... giữ nguyên phần auth
  }

  function updateUserProfile() {
    // ... giữ nguyên phần update profile
  }

  // Update combo display
  function updateComboDisplay(clicks, points) {
    const comboEl = jQuery("#comboDisplay");
    comboEl.find(".combo-counter").text(`×${clicks}`);
    comboEl.find(".combo-score").text(`+${points}`);

    // Add animation classes
    comboEl.removeClass("pulse bounce shake rotate");
    if (clicks >= 10) {
      comboEl.addClass("ultimate-combo shake");
    } else if (clicks >= 6) {
      comboEl.addClass("super-combo rotate");
    } else if (clicks >= 4) {
      comboEl.addClass("good-combo bounce");
    } else {
      comboEl.addClass("pulse");
    }
  }

  // Show floating score
  function showFloatingScore(points, x, y) {
    const scoreEl = jQuery(`<div class="floating-score">+${points}</div>`);
    scoreEl.css({
      left: x + "px",
      top: y + "px",
    });
    jQuery("body").append(scoreEl);

    setTimeout(() => scoreEl.remove(), 1000);
  }

  // Update combo timer
  function updateComboTimer(percentage) {
    jQuery("#comboTimer").css("width", `${percentage}%`);
  }

  // Reset combo after timeout
  function resetCombo() {
    if (comboTimer) {
      clearTimeout(comboTimer);
    }

    if (clickCount > 0) {
      totalScore += comboScore;
      updateTotalScore();
      debouncedSaveScore();
      showFloatingScore(
        comboScore,
        window.innerWidth / 2,
        window.innerHeight / 2
      );
    }

    clickCount = 0;
    comboScore = 0;
    jQuery("#comboDisplay").removeClass(
      "active ultimate-combo super-combo good-combo"
    );
    jQuery("#comboTimer").css("width", "0%");
    updateComboDisplay(1, 0);
  }

  // Handle click scoring
  function handleClick(e) {
    const currentTime = Date.now();

    if (currentTime - lastClickTime > COMBO_TIMEOUT) {
      clickCount = 0;
      comboScore = 0;
    }

    clickCount++;
    const pointsEarned = clickCount;
    comboScore += pointsEarned;

    updateComboDisplay(clickCount, comboScore);
    showFloatingScore(pointsEarned, e.pageX, e.pageY);

    // Reset combo timer
    if (comboTimer) {
      clearTimeout(comboTimer);
    }

    // Start combo timeout
    const startTime = Date.now();
    function updateTimer() {
      const elapsed = Date.now() - startTime;
      const remaining = COMBO_TIMEOUT - elapsed;

      if (remaining > 0) {
        const percentage = (remaining / COMBO_TIMEOUT) * 100;
        updateComboTimer(percentage);
        requestAnimationFrame(updateTimer);
      } else {
        resetCombo();
      }
    }

    updateTimer();
    comboTimer = setTimeout(resetCombo, COMBO_TIMEOUT);
    lastClickTime = currentTime;
  }

  // Save score to Firebase
  function debouncedSaveScore() {
    if (saveTimeout) {
      clearTimeout(saveTimeout);
    }

    saveTimeout = setTimeout(async () => {
      try {
        const userData = {
          score: totalScore,
          last_updated: firebase.firestore.FieldValue.serverTimestamp(),
          user_type: userType,
          user_info: userInfo,
        };

        await db.collection("users").doc(userId).set(userData, { merge: true });
      } catch (error) {
        console.error("Error saving score:", error);
      }
    }, 1000);
  }

  // Update total score display
  function updateTotalScore() {
    jQuery("#userScore").text(`Score: ${totalScore}`);
    jQuery("#userProfile").addClass("score-updated");
    setTimeout(() => {
      jQuery("#userProfile").removeClass("score-updated");
    }, 200);
  }

  // Handle click events
  jQuery("body").on(
    "click",
    ".bdt-element-link[data-id='a9ef003']",
    function (e) {
      e.preventDefault();
      handleClick(e);
      if (typeof createParticles === "function") {
        createParticles(e.pageX, e.pageY);
      }
    }
  );

  // Initialize
  checkTelegramAuth();
  loadUserData();
});
