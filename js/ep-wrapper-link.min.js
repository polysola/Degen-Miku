// main.js
jQuery(document).ready(function () {
  // Initialize Firebase
  const firebaseConfig = {
    apiKey: "AIzaSyD55ZnU_GX7L5varAuprnWugy_FDXM1FhQ",
    authDomain: "data-sui.firebaseapp.com",
    projectId: "data-sui",
    storageBucket: "data-sui.appspot.com",
    messagingSenderId: "15867478435",
    appId: "1:15867478435:web:9d2b205c67e828c8385a16",
    measurementId: "G-9HKQLMBCKN",
  };

  firebase.initializeApp(firebaseConfig);
  const db = firebase.firestore();

  // Initialize variables
  let totalScore = 0;
  let comboScore = 0;
  let saveTimeout = null;
  let clickCount = 0;
  let comboTimer = null;
  const defaultAvatar = "./images/site-300x300.png";
  let userId = null;
  let userType = "web";
  let userInfo = null;
  let lastClickTime = 0;
  const COMBO_TIMEOUT = 2000;

  // Get user info from URL parameters (when shared from Telegram)
  function getUserFromURL() {
    try {
      const urlParams = new URLSearchParams(window.location.search);
      const tgData = {};

      const fields = [
        "id",
        "first_name",
        "last_name",
        "username",
        "photo_url",
        "auth_date",
        "hash",
      ];
      fields.forEach((field) => {
        const value = urlParams.get(field);
        if (value) tgData[field] = value;
      });

      if (tgData.id) {
        console.log("Got user from URL params:", tgData);
        return {
          id: tgData.id,
          first_name: tgData.first_name || "",
          last_name: tgData.last_name || "",
          username: tgData.username || "",
          photo_url: tgData.photo_url || defaultAvatar,
        };
      }
    } catch (error) {
      console.error("Error getting user from URL:", error);
    }
    return null;
  }

  // Get user info from Telegram WebApp
  function getUserFromWebApp() {
    try {
      if (window.Telegram && window.Telegram.WebApp) {
        const webAppUser = window.Telegram.WebApp.initDataUnsafe.user;
        if (webAppUser) {
          console.log("Got user from WebApp:", webAppUser);
          return {
            id: webAppUser.id,
            first_name: webAppUser.first_name || "",
            last_name: webAppUser.last_name || "",
            username: webAppUser.username || "",
            photo_url: webAppUser.photo_url || defaultAvatar,
          };
        }
      }
    } catch (error) {
      console.error("Error getting user from WebApp:", error);
    }
    return null;
  }

  // Initialize user
  function initializeUser() {
    let user = getUserFromURL();

    if (!user) {
      user = getUserFromWebApp();
    }

    if (user) {
      userType = "telegram";
      userId = `tg_${user.id}`;
      userInfo = user;
      console.log("Initialized Telegram user:", userInfo);

      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.expand();
      }
    } else {
      userType = "web";
      userId = "web_" + new Date().getTime();
      console.log("Created web user:", userId);
    }
  }

  // Add UI elements
  jQuery("body").append(`
    <div id="userProfile" style="position: fixed; top: 20px; right: 20px; display: flex; align-items: center; gap: 15px; background: rgba(255,255,255,0.95); padding: 15px 20px; border-radius: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); backdrop-filter: blur(10px); z-index: 1000; transition: all 0.3s ease;">
      <img id="userAvatar" style="width: 48px; height: 48px; border-radius: 50%; object-fit: cover; border: 2px solid #FFD936;" src="${defaultAvatar}" alt="User Avatar">
      <div style="display: flex; flex-direction: column;">
        <span id="userName" style="font-weight: 600; font-size: 16px; color: #536942;">Web User</span>
        <span id="userScore" style="color: #536942; font-size: 14px; font-weight: 500;">Score: 0</span>
      </div>
    </div>
    <div id="comboDisplay" class="combo-container">
      <div class="combo-counter">×1</div>
      <div class="combo-score">+0</div>
    </div>
    <div id="comboTimer" class="combo-timer"></div>
  `);

  // Update user profile
  function updateUserProfile() {
    if (userType === "telegram" && userInfo) {
      jQuery("#userAvatar").attr("src", userInfo.photo_url || defaultAvatar);
      jQuery("#userName").text(
        userInfo.first_name +
          (userInfo.last_name ? " " + userInfo.last_name : "")
      );
    }
  }

  // Load user data
  async function loadUserData() {
    try {
      console.log("Loading data for user:", userId);
      const doc = await db
        .collection("users")
        .doc(userId || "default")
        .get();

      if (doc.exists) {
        const data = doc.data();
        totalScore = data.score || 0;
        if (data.user_info) {
          userInfo = data.user_info;
        }
      } else {
        await db
          .collection("users")
          .doc(userId || "default")
          .set({
            score: 0,
            created_at: firebase.firestore.FieldValue.serverTimestamp(),
            user_type: userType,
            user_info: userInfo,
          });
      }

      updateUserProfile();
      updateTotalScore();
    } catch (error) {
      console.error("Error loading user data:", error);
    }
  }

  // Update combo display
  function updateComboDisplay(clicks, points) {
    const comboEl = jQuery("#comboDisplay");
    comboEl.find(".combo-counter").text(`×${clicks}`);
    comboEl.find(".combo-score").text(`+${points}`);

    comboEl.removeClass("pulse bounce shake rotate");
    if (clicks >= 10) {
      comboEl.addClass("ultimate-combo shake");
    } else if (clicks >= 6) {
      comboEl.addClass("super-combo rotate");
    } else if (clicks >= 4) {
      comboEl.addClass("good-combo bounce");
    } else {
      comboEl.addClass("pulse");
    }
  }

  // Show floating score
  function showFloatingScore(points, x, y) {
    const scoreEl = jQuery(`<div class="floating-score">+${points}</div>`);
    scoreEl.css({
      left: x + "px",
      top: y + "px",
    });
    jQuery("body").append(scoreEl);
    setTimeout(() => scoreEl.remove(), 1000);
  }

  // Update combo timer
  function updateComboTimer(percentage) {
    jQuery("#comboTimer").css("width", `${percentage}%`);
  }

  // Reset combo
  function resetCombo() {
    if (comboTimer) {
      clearTimeout(comboTimer);
    }

    if (clickCount > 0) {
      totalScore += comboScore;
      updateTotalScore();
      debouncedSaveScore();
      showFloatingScore(
        comboScore,
        window.innerWidth / 2,
        window.innerHeight / 2
      );
    }

    clickCount = 0;
    comboScore = 0;
    jQuery("#comboDisplay").removeClass(
      "active ultimate-combo super-combo good-combo"
    );
    jQuery("#comboTimer").css("width", "0%");
    updateComboDisplay(1, 0);
  }

  // Handle click
  function handleClick(e) {
    const currentTime = Date.now();

    if (currentTime - lastClickTime > COMBO_TIMEOUT) {
      clickCount = 0;
      comboScore = 0;
    }

    clickCount++;
    const pointsEarned = clickCount;
    comboScore += pointsEarned;

    console.log(
      `Click ${clickCount}: earned ${pointsEarned} points, total combo: ${comboScore}`
    );

    updateComboDisplay(clickCount, comboScore);
    showFloatingScore(pointsEarned, e.pageX, e.pageY);

    if (comboTimer) {
      clearTimeout(comboTimer);
    }

    const startTime = Date.now();
    function updateTimer() {
      const elapsed = Date.now() - startTime;
      const remaining = COMBO_TIMEOUT - elapsed;

      if (remaining > 0) {
        const percentage = (remaining / COMBO_TIMEOUT) * 100;
        updateComboTimer(percentage);
        requestAnimationFrame(updateTimer);
      } else {
        resetCombo();
      }
    }

    updateTimer();
    comboTimer = setTimeout(resetCombo, COMBO_TIMEOUT);
    lastClickTime = currentTime;
  }

  // Save score
  function debouncedSaveScore() {
    if (saveTimeout) {
      clearTimeout(saveTimeout);
    }

    saveTimeout = setTimeout(async () => {
      try {
        console.log("Saving score:", totalScore);
        const userData = {
          score: totalScore,
          last_updated: firebase.firestore.FieldValue.serverTimestamp(),
          user_type: userType,
          user_info: userInfo,
        };

        await db
          .collection("users")
          .doc(userId || "default")
          .set(userData, { merge: true });
        console.log("Score saved successfully");
      } catch (error) {
        console.error("Error saving score:", error);
      }
    }, 1000);
  }

  // Update total score display
  function updateTotalScore() {
    jQuery("#userScore").text(`Score: ${totalScore}`);
    jQuery("#userProfile").addClass("score-updated");
    setTimeout(() => {
      jQuery("#userProfile").removeClass("score-updated");
    }, 200);
  }

  // Handle click events
  jQuery("body").on(
    "click",
    ".bdt-element-link[data-id='a9ef003']",
    function (e) {
      e.preventDefault();
      handleClick(e);
      if (typeof createParticles === "function") {
        createParticles(e.pageX, e.pageY);
      }
    }
  );

  // Initialize
  console.log("Starting initialization...");
  initializeUser();
  updateUserProfile();
  loadUserData();
  console.log("Initialization complete");
});
